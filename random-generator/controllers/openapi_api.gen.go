// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get random numbers and their standard deviation.
	// (GET /random/mean)
	GetRandomMean(w http.ResponseWriter, r *http.Request, params GetRandomMeanParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRandomMean operation middleware
func (siw *ServerInterfaceWrapper) GetRandomMean(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRandomMeanParams

	// ------------- Required query parameter "requests" -------------
	if paramValue := r.URL.Query().Get("requests"); paramValue != "" {

	} else {
		http.Error(w, "Query argument requests is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "requests", r.URL.Query(), &params.Requests)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter requests: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "length" -------------
	if paramValue := r.URL.Query().Get("length"); paramValue != "" {

	} else {
		http.Error(w, "Query argument length is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "length", r.URL.Query(), &params.Length)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter length: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetRandomMean(w, r.WithContext(ctx), params)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerFromMuxWithBaseURL(si, r, "")
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get(baseURL+"/random/mean", wrapper.GetRandomMean)
	})

	return r
}
